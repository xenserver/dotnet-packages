# Copyright (c) Citrix Systems, Inc.  
# All rights reserved.
# 
# Redistribution and use in source and binary forms,
# with or without modification, are permitted provided
# that the following conditions are met:
# 
# *   Redistributions of source code must retain the above
#     copyright notice, this list of conditions and the
#     following disclaimer.
# *   Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the
#     following disclaimer in the documentation and/or other
#     materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

diff -ru src/XmlRpcSerializer.cs src/XmlRpcSerializer.cs
--- src/XmlRpcSerializer.cs	2016-10-20 12:06:57.010643300 +0100
+++ src/XmlRpcSerializer.cs	2016-10-19 11:47:47.860736900 +0100
@@ -251,7 +251,7 @@
       {
         using (XmlTextReader xmlRdr = new XmlTextReader(stm))
         {
-          xmlRdr.ProhibitDtd = true;
+          xmlRdr.DtdProcessing = DtdProcessing.Prohibit;
           xdoc.Load(xmlRdr);
         }
       }
@@ -274,7 +274,7 @@
       {
         using (XmlTextReader xmlRdr = new XmlTextReader(txtrdr))
         {
-          xmlRdr.ProhibitDtd = true;
+          xmlRdr.DtdProcessing = DtdProcessing.Prohibit;
           xdoc.Load(xmlRdr);
         }
       }
@@ -512,7 +512,7 @@
         using (XmlTextReader xmlRdr = new XmlTextReader(stm))
         {
 #if (!COMPACT_FRAMEWORK)
-          xmlRdr.ProhibitDtd = true;
+          xmlRdr.DtdProcessing = DtdProcessing.Prohibit;
 #endif
           xdoc.Load(xmlRdr);
         }
@@ -537,7 +537,7 @@
         using (XmlTextReader xmlRdr = new XmlTextReader(txtrdr))
         {
 #if (!COMPACT_FRAMEWORK)
-          xmlRdr.ProhibitDtd = true;
+          xmlRdr.DtdProcessing = DtdProcessing.Prohibit;
 #endif
           xdoc.Load(xmlRdr);
         }
@@ -1458,7 +1458,7 @@
             throw new XmlRpcInvalidXmlRpcException(parseStack.ParseType
               + " contains member with more than one name element"
               + " " + StackDump(parseStack));
-          string rpcName = nameNode.FirstChild.Value;
+          string rpcName = nameNode.FirstChild == null ? "" : nameNode.FirstChild.Value;
           if (valueNode == null)
             throw new XmlRpcInvalidXmlRpcException(parseStack.ParseType
               + " contains struct member " + rpcName + " with missing value "
@@ -1472,7 +1472,7 @@
             if (!IgnoreDuplicateMembers)
               throw new XmlRpcInvalidXmlRpcException(parseStack.ParseType
                 + " contains struct value with duplicate member "
-                + nameNode.FirstChild.Value
+                + rpcName
                 + " " + StackDump(parseStack));
             else
               continue;
@@ -1694,8 +1694,16 @@
       parseStack.Push("double");
       try
       {
-        retVal = Double.Parse(node.FirstChild.Value,
-          CultureInfo.InvariantCulture.NumberFormat);
+        string s = node.FirstChild.Value;
+        if(s.ToLowerInvariant() == "nan")
+        {
+          retVal = Double.NaN;
+        }
+    	 else
+        {
+          retVal = Double.Parse(node.FirstChild.Value, 
+            CultureInfo.InvariantCulture.NumberFormat);
+	 }
       }
       catch (Exception)
       {
@@ -1752,7 +1760,11 @@
         //   other yyyy-MM-ddThh:mm:ss
         if (!DateTime8601.TryParseDateTime8601(s, out retVal))
         {
-          if (MapZerosDateTimeToMinValue && s.StartsWith("0000")
+          if (s == "never")
+          {
+              retVal = DateTime.MinValue;
+          }
+          else if (MapZerosDateTimeToMinValue && s.StartsWith("0000")
             && (s == "00000000T00:00:00" || s == "0000-00-00T00:00:00Z"
             || s == "00000000T00:00:00Z" || s == "0000-00-00T00:00:00"))
             retVal = DateTime.MinValue;
