# Copyright (c) Citrix Systems, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms,
# with or without modification, are permitted provided
# that the following conditions are met:
#
# *   Redistributions of source code must retain the above
#     copyright notice, this list of conditions and the
#     following disclaimer.
# *   Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the
#     following disclaimer in the documentation and/or other
#     materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

--- Newtonsoft.Json/JsonTextReader.cs
+++ Newtonsoft.Json/JsonTextReader.cs
@@ -607,15 +607,15 @@
                                 ParseString(currentChar, readType);
                                 return FinishReadQuotedStringValue(readType);
                             case '-':
-                                if (EnsureChars(1, true) && _chars[_charPos + 1] == 'I')
+                                if (EnsureChars(1, true))
                                 {
-                                    return ParseNumberNegativeInfinity(readType);
-                                }
-                                else
-                                {
-                                    ParseNumber(readType);
-                                    return Value;
+                                    if (_chars[_charPos + 1] == 'I')
+                                        return ParseNumberNegativeInfinity(readType);
+                                    if (_chars[_charPos + 1] == 'i')
+                                        return ParseNumberNegativeInfinityRrds(readType);
                                 }
+                                ParseNumber(readType);
+                                return Value;
                             case '.':
                             case '0':
                             case '1':
@@ -649,7 +649,9 @@
                                 SetToken(JsonToken.String, expected);
                                 return expected;
                             case 'I':
-                                return ParseNumberPositiveInfinity(readType);
+                                return ParseNumberPositiveInfinity(readType);
+                            case 'i':
+                                return ParseNumberPositiveInfinityRrds(readType);
                             case 'N':
                                 return ParseNumberNaN(readType);
                             case 'n':
@@ -915,17 +917,19 @@
                             case 'N':
                                 return ParseNumberNaN(readType);
                             case 'I':
-                                return ParseNumberPositiveInfinity(readType);
+                                return ParseNumberPositiveInfinity(readType);
+                            case 'i':
+                                return ParseNumberPositiveInfinityRrds(readType);
                             case '-':
-                                if (EnsureChars(1, true) && _chars[_charPos + 1] == 'I')
-                                {
-                                    return ParseNumberNegativeInfinity(readType);
-                                }
-                                else
+                                if (EnsureChars(1, true))
                                 {
-                                    ParseNumber(readType);
-                                    return Value;
+                                    if (_chars[_charPos + 1] == 'I')
+                                        return ParseNumberNegativeInfinity(readType);
+                                    if (_chars[_charPos + 1] == 'i')
+                                        return ParseNumberNegativeInfinityRrds(readType);
                                 }
+                                ParseNumber(readType);
+                                return Value;
                             case '.':
                             case '0':
                             case '1':
@@ -1688,16 +1692,19 @@
                         return true;
                     case 'I':
                         ParseNumberPositiveInfinity(ReadType.Read);
-                        return true;
+                        return true;
+                    case 'i':
+                        ParseNumberPositiveInfinityRrds(ReadType.Read);
+                        return true;
                     case '-':
-                        if (EnsureChars(1, true) && _chars[_charPos + 1] == 'I')
-                        {
-                            ParseNumberNegativeInfinity(ReadType.Read);
-                        }
-                        else
+                        if (EnsureChars(1, true))
                         {
-                            ParseNumber(ReadType.Read);
+                            if (_chars[_charPos + 1] == 'I')
+                                ParseNumberNegativeInfinity(ReadType.Read);
+                            if (_chars[_charPos + 1] == 'i')
+                                ParseNumberNegativeInfinityRrds(ReadType.Read);
                         }
+                        ParseNumber(ReadType.Read);
                         return true;
                     case '/':
                         ParseComment(true);
@@ -2418,7 +2425,14 @@
 
         private object ParseNumberNegativeInfinity(ReadType readType)
         {
-            return ParseNumberNegativeInfinity(readType, MatchValueWithTrailingSeparator(JsonConvert.NegativeInfinity));
+            bool matched = MatchValueWithTrailingSeparator(JsonConvert.NegativeInfinity);
+            return ParseNumberNegativeInfinity(readType, matched);
+        }
+
+        private object ParseNumberNegativeInfinityRrds(ReadType readType)
+        {
+            bool matched = MatchValueWithTrailingSeparator(JsonConvert.NegativeInfinityRrds);
+            return ParseNumberNegativeInfinity(readType, matched);
         }
 
         private object ParseNumberNegativeInfinity(ReadType readType, bool matched)
@@ -2448,8 +2462,16 @@
 
         private object ParseNumberPositiveInfinity(ReadType readType)
         {
-            return ParseNumberPositiveInfinity(readType, MatchValueWithTrailingSeparator(JsonConvert.PositiveInfinity));
+            bool matched = MatchValueWithTrailingSeparator(JsonConvert.PositiveInfinity);
+            return ParseNumberPositiveInfinity(readType, matched);
         }
+
+        private object ParseNumberPositiveInfinityRrds(ReadType readType)
+        {
+            bool matched = MatchValueWithTrailingSeparator(JsonConvert.PositiveInfinityRrds);
+            return ParseNumberPositiveInfinity(readType, matched);
+        }
+
         private object ParseNumberPositiveInfinity(ReadType readType, bool matched)
         {
             if (matched)
