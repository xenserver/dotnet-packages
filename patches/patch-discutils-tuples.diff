# Copyright (c) Citrix Systems, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms,
# with or without modification, are permitted provided
# that the following conditions are met:
#
# *   Redistributions of source code must retain the above
#     copyright notice, this list of conditions and the
#     following disclaimer.
# *   Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the
#     following disclaimer in the documentation and/or other
#     materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

--- src/Ntfs/ClusterBitmap.cs	2018-01-09 11:56:04.000000000 +0000
+++ src/Ntfs/ClusterBitmap.cs	2020-09-15 23:43:22.884436000 +0100
@@ -147,7 +147,7 @@
         {
             foreach (var run in runs)
             {
-                _bitmap.MarkAbsentRange(run.First, run.Second);
+                _bitmap.MarkAbsentRange(run.Item1, run.Item2);
             }
         }
 
--- src/Ntfs/RawClusterStream.cs	2018-01-09 11:56:06.000000000 +0000
+++ src/Ntfs/RawClusterStream.cs	2020-09-15 23:44:31.738225600 +0100
@@ -221,8 +221,8 @@
                     long lcn = runIdx == 0 ? 0 : _cookedRuns[runIdx - 1].StartLcn;
                     foreach (var allocation in alloced)
                     {
-                        runs.Add(new DataRun(allocation.First - lcn, allocation.Second, false));
-                        lcn = allocation.First;
+                        runs.Add(new DataRun(allocation.Item1 - lcn, allocation.Item2, false));
+                        lcn = allocation.Item1;
                     }
 
                     _cookedRuns.MakeNonSparse(runIdx, runs);
