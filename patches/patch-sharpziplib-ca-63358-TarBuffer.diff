# Copyright (c) Citrix Systems, Inc.  
# All rights reserved.
# 
# Redistribution and use in source and binary forms,
# with or without modification, are permitted provided
# that the following conditions are met:
# 
# *   Redistributions of source code must retain the above
#     copyright notice, this list of conditions and the
#     following disclaimer.
# *   Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the
#     following disclaimer in the documentation and/or other
#     materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

--- src/Tar/TarBuffer.cs	2011-06-17 23:09:32.000000000 +0100
+++ src/Tar/TarBuffer.cs	2011-08-01 20:14:18.000000000 +0100
@@ -292,49 +292,6 @@
 		}
 		
 		/// <summary>
-		/// Skip over a block on the input stream.
-		/// </summary>
-		public void SkipBlock()
-		{
-			if (this.inputStream == null) {
-				throw new TarException("no input stream defined");
-			}
-			
-			if (currentBlockIndex >= BlockFactor) {
-				if (!ReadRecord()) {
-					throw new TarException("Failed to read a record");
-				}
-			}
-			
-			currentBlockIndex++;
-		}
-		
-		/// <summary>
-		/// Read a block from the input stream.
-		/// </summary>
-		/// <returns>
-		/// The block of data read.
-		/// </returns>
-		public byte[] ReadBlock()
-		{
-			if (inputStream == null) {
-				throw new TarException("TarBuffer.ReadBlock - no input stream defined");
-			}
-			
-			if (currentBlockIndex >= BlockFactor) {
-				if (!ReadRecord()) {
-					throw new TarException("Failed to read a record");
-				}
-			}
-			
-			byte[] result = new byte[BlockSize];
-			
-			Array.Copy(recordBuffer, (currentBlockIndex * BlockSize), result, 0, BlockSize );
-			currentBlockIndex++;
-			return result;
-		}
-		
-		/// <summary>
 		/// Read a record from data stream.
 		/// </summary>
 		/// <returns>
@@ -352,7 +309,7 @@
 			int bytesNeeded = RecordSize;
 
 			while (bytesNeeded > 0) {
-				long numBytes = inputStream.Read(recordBuffer, offset, bytesNeeded);
+				int numBytes = inputStream.Read(recordBuffer, offset, bytesNeeded);
 				
 				//
 				// NOTE
@@ -367,12 +324,26 @@
 				//
 				// Thanks to 'Yohann.Roussel@alcatel.fr' for this fix.
 				//
-				if (numBytes <= 0) {
-					break;
+                // The fix from 'Yohann.Roussel@alcatel.fr' was actually a bug 
+                // that allowed callers to read from invalid data in the stale record buffer.
+                // Trying to read the next tar header record after the very last one 
+                // in a tar without the two consecutive zero blocks exposes the bug.
+
+                if (numBytes < bytesNeeded)
+                {
+                    // A whole block was not read because end of file was reached.
+                    // Clear the remainder of the block.
+                    // This emulates EOF blocks, two consecutive zero blocks, in a tar that 
+                    // lacks them -- like a Virtual Box 4.0.6 OVA.
+                    int zeroBytes = (numBytes < 0) ? bytesNeeded : bytesNeeded - numBytes;
+
+                    Array.Clear(recordBuffer, numBytes, zeroBytes);
+
+                    numBytes += zeroBytes;
 				}
 				
-				offset      += (int)numBytes;
-				bytesNeeded -= (int)numBytes;
+				offset      += numBytes;
+				bytesNeeded -= numBytes;
 			}
 			
 			currentRecordIndex++;
